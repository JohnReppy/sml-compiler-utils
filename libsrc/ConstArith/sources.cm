(* sources.cm
 *
 * CM file to build constant-folding code on SML/NJ.  The main purpose of this
 * file is to support testing of the library, since it is assumed that users
 * of this code will just include the pieces that they find useful in their
 * own sources.
 *
 * COPYRIGHT (c) 2017 John Reppy (http://cs.uchicago.edu/~jhr)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * This code is part of the SML Compiler Utilities, which can be found at
 *
 *      https://github.com/JohnReppy/sml-compiler-utils
 *)

Library

  signature BITWISE_CONST_ARITH
  signature CONST_ARITH
  signature SIGNED_CONST_ARITH
  signature UNSIGNED_CONST_ARITH

  structure BitwiseConstArith		(* bitwise operations *)

  structure SignedTrappingArith		(* signed operations with trapping semantics *)
  structure SignedWrappingArith		(* signed operations with wrapping semantics *)

  structure UnsignedTrappingArith	(* unsigned operations with trapping semantics *)
  structure UnsignedWrappingArith	(* unsigned operations with wrapping semantics *)

(* functor for gluing together different implementations into a single module that
 * implements the CONST_ARITH signature
 *)
  functor ConstArithGlueFn

(* functors for checking the arguments to the various operations *)
  functor CheckBitwiseArithFn
  functor CheckSignedArithFn
  functor CheckUnsignedArithFn

is

  $/basis.cm
  $/smlnj-lib.cm

  bitwise-const-arith-sig.sml
  bitwise-const-arith.sml
  check-bitwise-arith-fn.sml
  check-signed-arith-fn.sml
  check-unsigned-arith-fn.sml
  const-arith-glue-fn.sml
  const-arith-sig.sml
  signed-const-arith-sig.sml
  signed-trapping-arith.sml
  signed-wrapping-arith.sml
  unsigned-const-arith-sig.sml
  unsigned-trapping-arith.sml
  unsigned-wrapping-arith.sml
